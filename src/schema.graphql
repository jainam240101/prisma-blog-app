# @format
type Query {
  users(query: String,first:Int,skip:Int): [User!]!
  me: User!
  posts(query: String,,first:Int,skip:Int): [Post!]!
  myPosts:[Post!]!
  post(id:ID!):Post!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: createUserInput): AuthPayLoad!
  createPost(data: createPostInput): Post!
  createComment(data: createCommentInput): Comment!
  updateUser(data: updateUserContents): User!
  login(email:String!,password:String):AuthPayLoad!
  updatePost(id: ID!, data: updatePostContent): Post!
  updateComment(id: ID!, text: String!): Comment!
  deleteComment(id: ID!): Comment!
  deletePost(id: ID!): Post!
  deleteUser: User!
}

type Subscription {
  comment(postId:ID!): commentsubscriptionpayload!
  post: postsubscriptionpayload!
  myPost:postsubscriptionpayload!
}

type AuthPayLoad{
  user:User!
  token:String!
}

input updatePostContent {
  title: String
  body: String
  published: Boolean
}

input updateUserContents {
  name: String
  email: String
  age: Int
}

input createUserInput {
  name: String!
  email: String!
  password:String!
}

input createPostInput {
  title: String!
  body: String!
  published: Boolean!
}

input createCommentInput {
  text: String!
  post: ID!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post
}

type User {
  id: ID!
  name: String!
  password:String!
  email: String
  posts: [Post!]
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type commentsubscriptionpayload {
  mutation: MutationType!
  node: Comment!
}

type postsubscriptionpayload {
  mutation: MutationType!
  node: Post!
}
